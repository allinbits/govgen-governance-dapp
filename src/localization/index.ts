export const messages = {
  en: {
    homepage: {
      title: "GovGen",
      intro:
        "Explore the Governance dAppâ€”a seamlessly integrated interface empowering secure and efficient governance interactions with the GovGen chain. Engage in collaborative discussions and actively participate in the governance processes to shape the potential future of AtomOne.",
      proposalsHeader: "All Proposals",
      website: "Website",
    },
    voteOptions: {
      yes: "Yes",
      no: "No",
      nwv: "No with veto",
      nwvShort: "Veto",
      abstain: "Abstain",
    },
    proposalcreate: {
      transaction: "Transaction",
      back: "Back",
    },
    proposalpage: {
      badges: {
        votingPeriod: "Voting Period",
        depositPeriod: "Deposit Period",
        quorumPending: "Quorum not reached",
        depositPending: "Deposit not reached",
        depositFailed: "Deposit not met",
        passed: "Passed",
        rejected: "Rejected",
      },
      labels: {
        turnOut: "Turnout",
        quorum: "Quorum",
        result: "Proposal result",
        expectedResult: "Expected proposal result",
        proposalDescription: "Proposal Description",
        validatorQuota: "Validator Quota",
        title: "Title",
        description: "Description",
        proposer: "Proposer",
        votingStart: "Voting start",
        votingEnd: "Voting end",
        submitTime: "Submit time",
        depositEnd: "Deposit end",
        initialDeposit: "Initial deposit",
        totalDeposit: "Total deposit",
        messages: "Messages",
        changes: "Changes",
        proposalType: "Proposal type",
        upgradePlan: "Upgrade plan",
        noValidatorVotes: "No validators have voted yet...",
        validators: "Validators",
        validatorsVoted: "Validators Voted",
        accountsAll: "All Voters",
        accountsVoted: "Accounts Voted",
      },
      types: {
        text: "Text proposal",
        paramChange: "Parameter change proposal",
        upgrade: "Software upgrade proposal",
      },
      results: {
        passed: "Passed",
        failed: "Failed",
        rejected: "Rejected",
        willPass: "Will pass",
        willReject: "Will be rejected",
        willFail: "Will fail",
      },
    },
    proposalview: {
      labels: {
        unavailable: "Proposal is unavailable",
      },
    },
    components: {
      ErrorBox: {
        title: "Error",
        message: "Something went wrong...",
        cta: "Please refresh",
      },
      WalletConnect: {
        button: "Connect Wallet",
        cta: "Connect your wallet",
        ctaAddress: "Connect Address",
        balance: "Balance",
        cancel: "Cancel",
        disconnect: "Disconnect wallet",
        connecting: "Connecting wallet",
        wait: "Please wait...",
        trouble: "Troubleshooting",
        retry: "Try again",
        failed: "Connection Failed",
        failedSub: "Was not able to connect to your wallet",
        publicAddressDisclaimer:
          "* Connecting public address doesn't connect to your wallet and is used only for CLI command generation.",
        recommendedWallet: "We recommend connecting with address only",
        otherWallet: "or connect your Wallet. Make sure you have a wallet browser extension enabled.",
        enterAddress: "Enter your GovGen wallet address",
        addressPlaceholder: "e.g. govgen32423488234934d2423...",
      },
      Breakdown: {
        moniker: "Moniker",
        voter: "Voter",
        answer: "Answer",
        txHash: "TX Hash",
        weight: "Weight",
        time: "Time",
        hasNotVoted: "HAS NOT VOTED",
      },
      FooterSection: {
        cta: "Be a part of the conversation",
      },
      Search: {
        placeholder: "Search Proposal",
      },
      ProposalVote: {
        cta: "Vote",
        voted: "You voted",
        weightedInstructions: "Define weight for each of the voting options. The sum of weights must be equal to 1.",
      },
      ProposalDeposit: {
        cta: "Deposit",
        act: "deposited",
        deposited: "You deposited",
        instructions: "Enter deposit amount",
      },
      VotePanel: {
        breakdown: "Breakdown",
        noVotes: "No votes have been recorded.",
      },
      GithubComments: {
        signInLong: "Sign in via GitHub to be able to post messages",
        signIn: "Github Sign In",
        signOut: "Sign Out",
        proposalDiscussion: "Proposal Discussion",
        upvoteRatio: "Upvote Ratio",
        totalComments: "Total Comment(s)",
        viewOnGithub: "View on GitHub",
        postComment: "Post Comment",
      },
      GithubLinks: {
        communityLinks: "Community Links",
        signIn: "GitHub Sign In",
        signOut: "GitHub Sign Out",
        addLink: "Add Link",
        upvoteRatio: "Upvote Ratio",
        totalLinks: "Total Link(s)",
        link: "Link",
        invalidHttpsLink: "Link is not valid, must be HTTPS",
        invalidLinkContentLength: "Content length must be at least 32 characters",
        cancel: "Cancel",
        post: "Post",
      },
    },
    ui: {
      readMore: "Read More",
      readLess: "Read Less",
      actions: {
        cli: "Copy CLI Command",
        confirm: "or Sign with Wallet",
        signTxSecurely: "See: Why and How should I use the CLI?",
        cancel: "Cancel",
        clicta: "CLI Command",
        copied: "Copied",
        copy: "Copy",
        back: "Back",
        done: "Done",
      },
      buttons: {
        back: "Back",
      },
      tabs: {
        Info: "Info",
        Voters: "Voters",
        Discussions: "Discussions",
        Description: "Description",
        Links: "Links",
        Yes: "Yes",
        No: "No",
        Veto: "Veto",
        Abstain: "Abstain",
      },
    },
  },
};
